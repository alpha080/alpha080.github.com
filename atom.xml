<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[后飞的老笨鸟]]></title>
  <link href="http://alpha080.github.com/atom.xml" rel="self"/>
  <link href="http://alpha080.github.com/"/>
  <updated>2013-08-15T21:36:32+08:00</updated>
  <id>http://alpha080.github.com/</id>
  <author>
    <name><![CDATA[alpha080]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[jQuery Fundamentals 笔记 01]]></title>
    <link href="http://alpha080.github.com/blog/2013/08/13/jquery-fundamentals-note-01/"/>
    <updated>2013-08-13T08:49:00+08:00</updated>
    <id>http://alpha080.github.com/blog/2013/08/13/jquery-fundamentals-note-01</id>
    <content type="html"><![CDATA[<p>jQuery 是目前使用最广泛的 javascript 函数库，全球前10000个访问最高的网站中，有65%使用了 jQuery，是目前最受欢迎的 JavaScript 库。之所以这么受欢迎，是因为 jQuery 能让你做到 &#8220;Write less, do more&#8221;.</p>

<p>在线教程中，名气较大有 <a href="http://jqfundamentals.com/">jQuery Fundamentals</a> , 我准备写些相关笔记方便自己复习。</p>

<h2>JavaScript Basics</h2>

<h3>how to write comments</h3>

<pre><code>// I love emmet!
var foo;
</code></pre>

<p>// 用于单行</p>

<pre><code>/* hehe
   hehe
*/

function sass(foo /* blabal */, bar /* blabla */) {
}
</code></pre>

<p>/*  */ 用于多行或者行内</p>

<h3>The building blocks of JavaScript</h3>

<h4>Var</h4>

<p>提问: 变量名不能以什么开头？</p>

<h4>Functions</h4>

<pre><code>var addTwoNum = function() {
    return a+b;
}
</code></pre>

<p>function expression</p>

<pre><code>function addTwoNum(a, b) {
    return a+b;
}
</code></pre>

<p>function declaration</p>

<p>两者都可以表达函数，但是最好用前者，为什么？</p>

<h4>Functions and variable scope</h4>

<p>简单说就是警惕 global, 变量前面没事就写个 var，安全第一～</p>

<h4>Objects</h4>

<p>以下五种不是 Objects</p>

<ul>
<li>strings(text)</li>
<li>booleans(true/false)</li>
<li>numbers</li>
<li>undefined</li>
<li>null</li>
</ul>


<h4>Accessing properties</h4>

<pre><code>var person = {
    name: 'bush',
    age: 3
};

console.log('person[age]');
console.log(person.name);
</code></pre>

<p>Bracket notation and dot notation</p>

<h4>Objects methods</h4>

<pre><code>var person = {
    name: 'foo',
    age: 3,
    greet: function(name) {
        console('Hi' + name);
        }
    };

person.greet(person.name);
</code></pre>

<h4>The meaning of <em>this</em></h4>

<pre><code>window.color = "red";
var o = {color: "blue"};

function sayColor() {
    alert(this.color);
}

sayColor();     //"red"

o.sayColor = sayColor;
o.sayColor();   //"blue"
</code></pre>

<p>用下面的两个函数可以强制改变 this 指定的对象:
.call() vs .apply()
这两个函数实在是太像了，以至于看完本章以后脑子里面还是一片糨糊，也可以看看 <a href="http://stackoverflow.com/questions/1986896/what-is-the-difference-between-call-and-apply" title="What is the difference between using call and apply to invoke a function?">stackoverflow</a></p>

<pre><code>foo.apply(person, ["hello", "wow"]);
foo.call(person, "hello", "wow");
</code></pre>

<p>不管是哪一个，都有能对某个对象直接执行本身不具备的 method 而不必修改对象本身的妙用。</p>

<h4>Objects in jQuery</h4>

<p>简单说就是利用了 CSS 的选择符的便利性</p>

<h4>Arrays</h4>

<p>注意索引从0开始即可</p>

<h3>Logic and Truthiness</h3>

<p>1 is truthy, and there are five values in JavaScript that is falsy.</p>

<ul>
<li>null</li>
<li>NaN</li>
<li>0</li>
<li>&#8221;</li>
<li>undefined</li>
</ul>


<h4>The Ternary Operator</h4>

<pre><code>var name = (dim === "true") ? "yes" : "no";
</code></pre>

<h3>结语</h3>

<p>好吧，成功地把以前的语文老师改造成体育老师了，顺便也打了几行代码，感觉神清气爽多了～
打键盘，更健康！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rake new_post 出错]]></title>
    <link href="http://alpha080.github.com/blog/2013/08/12/rake-new-post-chu-cuo/"/>
    <updated>2013-08-12T19:49:00+08:00</updated>
    <id>http://alpha080.github.com/blog/2013/08/12/rake-new-post-chu-cuo</id>
    <content type="html"><![CDATA[<p>今天更新博客的时候，运行命令提示错误:</p>

<pre><code>You have already activated rake 0.9.6, but your Gemfile requires rake 0.9.2.2. Using bundle exec may solve this.
</code></pre>

<p>由于我并不使用 ruby，所以看到这提示百思不得其解，难道还要我降级 rake 不成？最后索性把 Octopress 目录下的文件内容查看了一遍，发现 Gemfile 里面涉及了 rake 版本，于是进行了修改:</p>

<pre><code>gem 'rake', '~&gt; 0.9.6'
</code></pre>

<p>重新运行命令，yeah!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[命令行下使用词典]]></title>
    <link href="http://alpha080.github.com/blog/2013/08/12/ming-ling-xing-xia-shi-yong-ci-dian/"/>
    <updated>2013-08-12T08:22:00+08:00</updated>
    <id>http://alpha080.github.com/blog/2013/08/12/ming-ling-xing-xia-shi-yong-ci-dian</id>
    <content type="html"><![CDATA[<p>Linux 下各种词典百花齐放，从我以前用的 stardict 到现在的 goldendict，个个功能都很强大，但是有时候我只想查词义，这时候觉得前面几个软件都过于重量级，所以就找了一些在命令行下使用的词典。</p>

<h3>一、dictd</h3>

<p>这是一个很&#8221;古老&#8221;的软件了，使用 dict 协议，gentoo源里面提供了很多词典，我比较喜欢使用 dictd-wn，也就是 <a href="http://wordnet.princeton.edu/">wordnet</a></p>

<h4>安装</h4>

<pre><code>emerge -av dictd-wn
</code></pre>

<h4>使用</h4>

<p>如果想要搜索 &#8220;foo&#8221;，输入:</p>

<pre><code>dict foo
</code></pre>

<p>上面的结果会把你安装的所有词典的查询结果显示出来，如果只想在 wordnet 里面查找，只要:</p>

<pre><code>dict -d wn foo
</code></pre>

<p>不过每次都要输入这么长的命令实在是太烦人了，这时当然是要:</p>

<pre><code>alias xxx="dict -d wn"
</code></pre>

<h3>二、wn</h3>

<p>事实上 wn 就是 wordnet 在命令行下的查询命令，只不过输出的格式不佳，所以被我弃用了。
如果一定要用，执行:</p>

<pre><code>wn -over foo
</code></pre>

<h3>三、<a href="http://sourceforge.net/projects/yodao-free/">youdao-free</a></h3>

<p>这是一个 python 脚本，用起来蛮方便的，输出格式也很好。下载下来后直接执行:</p>

<pre><code>python dict.py foo
</code></pre>

<p>当然了，做为懒人，肯定要:</p>

<pre><code>alias xxx="python dict.py"
source .bashrc
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[hello world]]></title>
    <link href="http://alpha080.github.com/blog/2013/03/03/hello-world/"/>
    <updated>2013-03-03T18:53:00+08:00</updated>
    <id>http://alpha080.github.com/blog/2013/03/03/hello-world</id>
    <content type="html"><![CDATA[<p>虽然很少写博客，但是觉得留一个博客还是有必要的，起码留给自己一点在东方的生存空间。</p>

<p>不知道我会在这个博客写些什么，也许只是给自己的生活备个份，在这浩瀚无边的宇宙中留个脚印。</p>

<p>无论这儿会留下什么，不管答案是不是42，作为开头，一定是 Hello, world!</p>
]]></content>
  </entry>
  
</feed>
